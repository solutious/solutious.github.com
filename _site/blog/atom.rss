<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The Solutious Blog</title>
 <link href="http://blog.solutious.com/atom.xml" rel="self"/>
 <link href="http://blog.solutious.com/"/>
 <updated>2009-05-11T01:23:23-07:00</updated>
 <id>http://blog.solutious.com/</id>
 <author>
   <name>Solutious Inc.</name>
   <email>info@solutious.com</email>
 </author>
 
 
 <entry>
   <title>What GitHub's Punch Cards Say</title>
   <link href="http://blog.solutious.com/blog/2009/05/06/github-punchcards"/>
   <updated>2009-05-06T00:00:00-07:00</updated>
   <id>http://blog.solutious.com/blog/2009/05/06/github-punchcards</id>
   <content type="html">&lt;p&gt;I'm fascinated with GitHub's &lt;a href="http://github.com/why/shoes/graphs/punch_card"&gt;punch&lt;/a&gt; &lt;a href="http://github.com/mislav/hanna/graphs/punch_card"&gt;cards&lt;/a&gt;. They're visual representations of project commits by day and hour and they're available for every public project on GitHub. Here's the punch card for &lt;a href="http://github.com/mislav/will_paginate/"&gt;mislav-will_paginate&lt;/a&gt;, one of the &lt;a href="http://github.com/popular/watched"&gt;most popular projects&lt;/a&gt; on GitHub:&lt;/p&gt;

&lt;h3&gt;will_paginate&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/mislav/will_paginate/graphs/punch_card"&gt;&lt;img src="http://farm4.static.flickr.com/3382/3507637336_e1b9c97b20_o.png" border="0" width="400" height="150" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The punch card says &lt;a href="http://github.com/mislav/"&gt;Mislav&lt;/a&gt; works hard! He committed at all hours of the day, every day of the week (the larger the dot, the greater number of commits). It's important to note, when looking at the punch cards, how many active developers have committed to the project. You could look through the &lt;a href="http://github.com/mislav/will_paginate/commits"&gt;list of commits&lt;/a&gt; but that's tedious and verbose. The quickest way to gauge how many active developers there are on a project is to look at the &lt;a href="http://github.com/mislav/will_paginate/graphs/impact"&gt;impact graph&lt;/a&gt; (note that there are several committers for will_paginate, but the vast majority are from two accounts, both of which are Mislav).&lt;/p&gt;

&lt;h2&gt;Punch Cards Over Time&lt;/h2&gt;

&lt;p&gt;I thought it would be interesting to see what a punch card looked like over time. I started saving them for a few of my own projects so I could animate them.&lt;/p&gt;

&lt;h3&gt;Rye (0.3.1 to 0.6.4)&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com/delano/rye"&gt;Rye&lt;/a&gt; is a small project that I started on April 4th for executing SSH commands from Ruby. I wrote the core of it over a couple of weekends and then iterated over the following few weeks. You can see that in the animation below.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.com/delano/rye/graphs/punch_card"&gt;&lt;img src="http://farm4.static.flickr.com/3605/3506751765_24443ccb39_o.gif" border="0" width="400" height="150" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Rudy (0.4.0 to 0.7.3)&lt;/h3&gt;

&lt;p&gt;I also saved them for a much larger project, &lt;a href="http://github.com/solutious/rudy"&gt;Rudy&lt;/a&gt;. I started Rudy in February while doing some deployment work for &lt;a href="http://rilli.com/"&gt;Rilli&lt;/a&gt;. The first frame is from version 0.4 and the second frame is version 0.5. They're so different that it would be easy to assume I made a mistake generating the animation. That difference represents a month of hard work where I wrote and re-wrote the project several times.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.com/solutious/rudy/graphs/punch_card"&gt;&lt;img src="http://farm4.static.flickr.com/3359/3506751705_89f1fb5e38_o.gif" border="0" width="400" height="150" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;br/&gt;


&lt;h2&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;What I love about the punch cards is that they're both informative and motivational. They give me a better understanding of how I work and how my effort relates to that of other open source developers. When I'm focused on a goal like getting the next version out the door, I occasionally forget what I went through to get there. The punch cards help me remember.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Louise Hendy Day, a Celebration of Realtime Marketing</title>
   <link href="http://blog.solutious.com/blog/2009/05/05/louise-hendy-day"/>
   <updated>2009-05-05T00:00:00-07:00</updated>
   <id>http://blog.solutious.com/blog/2009/05/05/louise-hendy-day</id>
   <content type="html">&lt;p&gt;If you're like &lt;a href="http://twitter.com/solutious"&gt;me&lt;/a&gt;, you woke up today thinking May 5th was Cinco de Mayo. What people like us didn't know is that it's also Louise Hendy Day. This is probably the first and last time you'll hear about Louise Hendy Day, but the implications of it are pretty interesting.&lt;/p&gt;

&lt;p style="text-align: center"&gt;&lt;a href="http://twitter.com/#search?q=louisehendyday" style="text-decoration: none;"&gt;&lt;img border="0" src="http://farm4.static.flickr.com/3569/3505434648_36eca44c11.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;A Fictitious Holiday&lt;/h3&gt;

&lt;p&gt;Louise Hendy Day is a fictitious holiday created by a &lt;a href="https://twitter.com/louise_hendy"&gt;single person&lt;/a&gt;, earlier today, in an attempt to get into the trending topics on Twitter. And it worked. At least for a few hours (it's no longer a trending topic as of 16:00 EST but the &lt;a href="http://search.twitter.com/search?q=%23louisehendyday"&gt;flurry of messages continues&lt;/a&gt;).&lt;/p&gt;

&lt;p style="text-align: center"&gt;&lt;a href="http://tweetstats.com/trends" style="text-decoration: none;"&gt;&lt;img border="0" src="http://farm4.static.flickr.com/3357/3504801219_27d736ccf8.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Why is this important? It's important because we've heard a lot about the power of the web, "social media" in particular, to reach out to build and maintain networks of clients and customers. Rarely however, do we see this power in action, &lt;em&gt;in real time&lt;/em&gt;. One person generated a massive buzz literally out of nothing. The product is a faux-celebration for a holiday that doesn't otherwise exist.&lt;/p&gt;

&lt;h3&gt;A New Way to Do Business&lt;/h3&gt;

&lt;p&gt;Now, there are two ways you can view Louise Hendy Day: a useless, passing fad or &lt;em&gt;a completely new way to do business&lt;/em&gt;. You can communicate with current and prospective customers in real-time. It's like having a conversation with thousands of people at the same time.&lt;/p&gt;

&lt;p&gt;Twitter won't do this alone -- there will be other service providers -- but already today, right now we have a tool more powerful than any PR agency ever had. That's pretty exciting.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Goodnight Sweet Prince (Dreamhost)</title>
   <link href="http://blog.solutious.com/blog/2009/05/03/goodnight-sweet-prince-dreamhost"/>
   <updated>2009-05-03T00:00:00-07:00</updated>
   <id>http://blog.solutious.com/blog/2009/05/03/goodnight-sweet-prince-dreamhost</id>
   <content type="html">&lt;p&gt;I have a difficult time putting to words the excitement I felt when GitHub announced &lt;a href="http://github.com/blog/315-cname-support-for-github-pages"&gt;CNAME support&lt;/a&gt;. And now, just a few short months later I've finally freed myself from Dreamhost's shackles. I'm now using GitHub for all my hosting needs (including solutious.com) and I must say, it feels pretty good.&lt;/p&gt;

&lt;p&gt;Shared hosting has served a useful purpose over the years, but it's days are numbered. &lt;a href="http://heroku.com/pricing"&gt;Heroku&lt;/a&gt;: free. &lt;a href="http://code.google.com/appengine/"&gt;Google App Engine&lt;/a&gt;: free. &lt;a href="http://appjet.com/"&gt;AppJet&lt;/a&gt;: free. You can't argue with that. GitHub is not free but CNAME support is included with all paid accounts which I already have. I'm now riding the workflow of the future!&lt;/p&gt;

&lt;h2&gt;Workflow of the Future&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Me -&amp;gt; TextMate -&amp;gt; Markdown -&amp;gt; Terminal -&amp;gt; Jekyll -&amp;gt; Git -&amp;gt; You
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>It's an outrake!</title>
   <link href="http://blog.solutious.com/blog/2009/04/30/its-an-outrake"/>
   <updated>2009-04-30T00:00:00-07:00</updated>
   <id>http://blog.solutious.com/blog/2009/04/30/its-an-outrake</id>
   <content type="html">&lt;p&gt;This is a story about Ruby mixins, Rake, and hell. After releasing &lt;a href="http://github.com/solutious/rudy" title="Rudy: not your grandparents' deployment tool"&gt;Rudy&lt;/a&gt; 0.6 last week, I started immediately on 0.7. This next version has a rebuilt DSL for the routines configuration, including a new syntax for running shell commands. The new syntax makes it possible to specify shell commands like methods. You can probably see where this is heading. First, a comparison of the old and new syntax:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Old, 0.6 syntax&lt;/strong&gt;
Liquid error: No such file or directory - pygmentize -f html -l ruby&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New, 0.7 syntax&lt;/strong&gt;
Liquid error: No such file or directory - pygmentize -f html -l ruby&lt;/p&gt;

&lt;p&gt;There are several advantages to using the new syntax which I'll cover in a future post. Right now, I'll cut to the hellish chase.&lt;/p&gt;

&lt;p&gt;Both DSLs produce a configuration hash. Nothing else should happen when they're parsed. And nothing else did happen until I tried running the tests with rake. The old syntax was fine, but I was getting some strange errors with the new syntax. Stuff like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error in test/10_config/30_machines_test.rb: can't convert Fixnum into String
/usr/local/lib/ruby/1.9.1/fileutils.rb:1386:in `path'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;FileUtils? That's weird, I don't use FileUtils. Or do I?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rake-0.8.4/lib/rake.rb&lt;/code&gt; includes &lt;a href="http://www.ruby-doc.org/core/classes/FileUtils.html"&gt;FileUtils&lt;/a&gt; into the RakeFileUtils module and later includes RakeFileUtils &lt;em&gt;into the global namespace&lt;/em&gt;. My criminy!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Offensive ruby code&lt;/strong&gt;
Liquid error: No such file or directory - pygmentize -f html -l ruby&lt;/p&gt;

&lt;p&gt;That means when I'm running rake the following methods are accessible from everywhere: &lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt;, ...! The &lt;code&gt;mkdir&lt;/code&gt; in the DSL was &lt;em&gt;being executed as it was parsed&lt;/em&gt;. That's insane. Thank the Great Scott I wasn't testing &lt;code&gt;rm&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rudy, A Replacement for EC2 API Tools.</title>
   <link href="http://blog.solutious.com/blog/2009/04/22/rudy-ec2-api-tools-replacement"/>
   <updated>2009-04-22T00:00:00-07:00</updated>
   <id>http://blog.solutious.com/blog/2009/04/22/rudy-ec2-api-tools-replacement</id>
   <content type="html">&lt;p&gt;Rudy is a &lt;a href="/2009/04/21/rudy-deployment-introduction/"&gt;development and deployment tool&lt;/a&gt; for EC2. It comes with an executable called &lt;code&gt;rudy-ec2&lt;/code&gt; that can also be used as a replacement for Amazon's EC2 API tools. The EC2 API tools are a great reference implementation but they're unfriendly and become unwieldily when you have more than a few instances. &lt;code&gt;rudy-ec2&lt;/code&gt; is an alternative to these tools that can be used on it's own (you don't need to start using Rudy), allowing you to incorporate Rudy into your development process gradually.&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;rudy-ec2&lt;/code&gt; is included with Rudy so if you've already installed Rudy, you can skip to the next section.&lt;/p&gt;

&lt;p&gt;Download Rudy from &lt;a href="http://github.com/solutious/rudy"&gt;github.com&lt;/a&gt; or install it via RubyGems:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo gem install rudy
$ sudo gem install solutious-rudy --source http://gems.github.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: If you are not installing via RubyGems and running Ruby 1.8.x, you need to make sure the Ruby dependencies (see the &lt;a href="http://github.com/solutious/rudy/blob/master/README.rdoc"&gt;README&lt;/a&gt;) are installed and in your LOAD_PATH. Ryan Tomayko wrote &lt;a href="http://gist.github.com/54177"&gt;a gist&lt;/a&gt; about it.&lt;/p&gt;

&lt;h2&gt;Configuration, 3 ways to do it&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;rudy-ec2&lt;/code&gt; needs your Amazon Web Services credentials in order to execute commands on EC2. You can configure these in 3 ways: rudy configuration, environment variables or command-line options.&lt;/p&gt;

&lt;h3&gt;Rudy Configuration (method 1)&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rudy-ec2&lt;/code&gt; can use the same configuration as &lt;code&gt;rudy&lt;/code&gt;. If you've already created a Rudy configuration file, you don't need to do anything else. Otherwise, run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy generate-config
  [edit ~/.rudy/config with your Amazon Web Services credentials] 
$ rudy init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: &lt;em&gt;The above command is &lt;strong&gt;rudy&lt;/strong&gt; and not &lt;strong&gt;rudy-ec2&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Environment Variables (method 2)&lt;/h3&gt;

&lt;h4&gt;Bash&lt;/h4&gt;

&lt;p&gt;Add the following to your &lt;code&gt;~/.bashrc&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AWS_ACCESS_KEY='your_aws_key'
AWS_SECRET_KEY='your_aws_secret'
AWS_ACCOUNT_NUMBER=123456789012
export AWS_ACCESS_KEY AWS_SECRET_KEY AWS_ACCOUNT_NUMBER

EC2_CERT=path/2/cert.pem
EC2_PRIVATE_KEY=path/2/pk.pem
export EC2_CERT EC2_PRIVATE_KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then either start working in a new terminal window or run &lt;code&gt;source ~/.bashrc&lt;/code&gt; to refresh your current one.&lt;/p&gt;

&lt;h4&gt;Windows/DOS&lt;/h4&gt;

&lt;p&gt;Set your environment variables from your System Properties menu.&lt;/p&gt;

&lt;h3&gt;Command-line Options (method 3)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ rudy-ec2 -A your_aws_key -S your_aws_secret COMMAND
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: &lt;em&gt;If you use the command-line options, your credentials will appear in your shell history. You can run &lt;code&gt;history -c&lt;/code&gt; to clear it.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;rudy-ec2  Commands&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;rudy-ec2&lt;/code&gt; command follows the same convention as &lt;code&gt;rudy&lt;/code&gt; commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy-ec2 -h
USAGE: rudy-ec2 [global options] COMMAND [command options]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default command displays the current instances&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy-ec2
i-8794fcee  ec2-11-22-33-44.compute-1.amazonaws.com  (group-awesome)
i-9e94fcf7  ec2-55-66-77-88.compute-1.amazonaws.com  (group-awesome)
i-9394fcfa  terminated  (group-awesome)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When no arguments are given, all commands display information about the object you specify:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy-ec2 images
Images owned by amazon
aki-46e7002f i386   (aki-linux.2.6.21.7-2.fc8xen-xfs/vmlinuz.manifest.xml)
aki-9800e5f1 x86_64 (ec2-public-images/vmlinuz-2.6.18-xenU-ec2-v1.0.x86_64.aki.manifest.xml)
aki-9b00e5f2 i386   (ec2-public-images/vmlinuz-2.6.18-xenU-ec2-v1.0.i386.aki.manifest.xml)
...

$ rudy-ec2 groups
group-awesome (authorized accounts: 123456789012:default)
11.22.33.44/32 -&amp;gt; tcp(22), tcp(80), tcp(443)
55.66.77.88/32 -&amp;gt; tcp(22), tcp(80), tcp(443)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With arguments, you can create, modify or destroy all EC2 objects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy-ec2 instances -C -m ami-235fba4a -s m1.small -k keypair-name
i-9394fcfa  pending  (default)

$ rudy-ec2 groups -A -p 8080,8081 group-awesome
Authorize access to group-awesome from 11.22.33.44/32
on tcp ports: 8080, 8081
default (authorized accounts: 123456789012:default)
   11.22.33.44/32 -&amp;gt; tcp(22), tcp(80), tcp(443), tcp(88), tcp(99)
   11.22.33.44/32 -&amp;gt; tcp(8080), tcp(8081)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Safety&lt;/h2&gt;

&lt;p&gt;I'm always a little nervous using the Amazon AMI tools because I feel like I'm one command away from a nightmare. &lt;code&gt;rudy-ec2&lt;/code&gt; solves this by prompting for user input before executing any potentially destructive actions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy-ec2 groups -D group-awesome
Destroying group: group-awesome
Are you sure? To continue, resolve (7 * 5): 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can avoid the annoyance by providing the &lt;code&gt;-Y&lt;/code&gt; global&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy-ec2 -Y groups -D group-awesome    # Careful!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That's &lt;code&gt;rudy-ec2&lt;/code&gt; in a nutshell. For more information, check out the &lt;a href="http://opensource.solutious.com/rudy"&gt;RDocs&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rudy, not your grandparent's deployment tool</title>
   <link href="http://blog.solutious.com/blog/2009/04/21/rudy-not-your-grandparents-deployment-tool"/>
   <updated>2009-04-21T00:00:00-07:00</updated>
   <id>http://blog.solutious.com/blog/2009/04/21/rudy-not-your-grandparents-deployment-tool</id>
   <content type="html">&lt;p&gt;&lt;a href="http://github.com/solutious/rudy"&gt;Rudy&lt;/a&gt; is a command-line development and deployment tool. It's been in private beta for about two months and today marks the day of the &lt;a href="http://github.com/solutious/rudy/tree/0.6"&gt;first public release&lt;/a&gt; &lt;code&gt;[1]&lt;/code&gt;. The project is still in alpha status and many features have yet to be developed but it's already useful for exploring the features of Amazon EC2. In this post, I'll introduce Rudy's core features and demonstrate how these features can help build and manage environments in EC2.&lt;br/&gt;
&lt;/p&gt;

&lt;h2&gt;A quick look&lt;/h2&gt;

&lt;p&gt;It's useful to know what working with Rudy looks like before getting into the details:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy startup            # Launch the default machine group, stage-app
$ rudy -e dev startup     # Launch the dev-app machine group
$ rudy machines           # List all instances running in stage-app
$ rudy -u root ssh        # SSH to root@m-us-east-1b-stage-app-01
$ rudy ssh uptime         # Execute the uptime command on app stage-app machines
$ rudy shutdown           # Terminate stage-app instances
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See also:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy -h 
$ rudy show-commands
$ rudy COMMAND -h
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Machine Groups&lt;/h2&gt;

&lt;p&gt;Rudy helps you build and manage machines in EC2 by organizing them into groups of &lt;em&gt;environments&lt;/em&gt; and &lt;em&gt;roles&lt;/em&gt;. These are called &lt;em&gt;machine groups&lt;/em&gt;. You can run multiple machines with the same role. These are called &lt;em&gt;positions&lt;/em&gt;. Rudy also supports running machine groups across availability &lt;em&gt;zones&lt;/em&gt;. When you put all this together, you have a unique name for every machine. The default machine is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;         zone     env  role
          v        v    v   
    m-us-east-1b-stage-app-01
    ^                       ^
 "machine"                position
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;stage&lt;/code&gt; is the default environment and &lt;code&gt;app&lt;/code&gt; is the default role, but these can be changed too (see Defaults below). These machine groups are configured using a Ruby DSL (domain-specific language) that looks like this:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - pygmentize -f html -l ruby&lt;/p&gt;

&lt;p&gt;The configuration above describes the properties for 4 machine groups: &lt;code&gt;dev-app&lt;/code&gt;, &lt;code&gt;dev-analyzer&lt;/code&gt;, &lt;code&gt;stage-app&lt;/code&gt;, and &lt;code&gt;stage-analyzer&lt;/code&gt;. Since we've defined two &lt;code&gt;app&lt;/code&gt; machines per environment, that makes 6 machines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m-us-east-1b-dev-app-01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m-us-east-1b-dev-app-02&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m-us-east-1b-dev-analyzer-01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m-us-east-1b-stage-app-01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m-us-east-1b-stage-app-02&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m-us-east-1b-stage-analyzer-01&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Routines&lt;/h2&gt;

&lt;p&gt;The machines configuration describes the whats or the "physical" characteristics of the environments. The routines configuration describes the repeatable processes.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - pygmentize -f html -l ruby&lt;/p&gt;

&lt;p&gt;This routines configuration describes the processes for the &lt;code&gt;stage-analyzer&lt;/code&gt; group.&lt;/p&gt;

&lt;h2&gt;Running a Routine&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ rudy -r analyzer startup
Starting stage-app

---  BEFORE SCRIPTS (local)  ------------------------------
Connecting to localhost
...
Starting m-us-east-1b-stage-app-01
Associating 11.22.33.44 to i-11111111
Starting m-us-east-1b-stage-app-02
Associating 55.66.77.88 to i-22222222
....

---  DISK ROUTINES  ---------------------------------------
...

---  AFTER SCRIPTS  ---------------------------------------
...

The following machines are now available:
m-us-east-1b-stage-app-01  ec2-11-22-33-44.compute-1.amazonaws.com
m-us-east-1b-stage-app-02  ec2-55-66-77-88.compute-1.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Defaults&lt;/h2&gt;

&lt;p&gt;You may be wondering where the &lt;code&gt;us-east-1b&lt;/code&gt; value comes from. This is an EC2 availability zone and it's one of several default values that Rudy assumes in order to function straight "out of the box". The default values can be changed too:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - pygmentize -f html -l ruby&lt;/p&gt;

&lt;h2&gt;Conclusion / More to come&lt;/h2&gt;

&lt;p&gt;As I mentioned, the current release of Rudy (0.6) is in alpha status so it's not ready for production. There's a lot of work to do, including a lot of documentation to write, but hopefully you can already see the value of incorporating Rudy into your development process. For now, the &lt;a href="http://github.com/solutious/rudy"&gt;README&lt;/a&gt; contains installation instructions and the &lt;a href="http://opensource.solutious.com/rudy"&gt;RDocs&lt;/a&gt; are somewhat helpful too!&lt;/p&gt;

&lt;h2&gt;Notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[1]&lt;/code&gt; Rudy has been available on GitHub since the project began, but this release is the first one with documentation.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>From WordPress to Jekyll</title>
   <link href="http://blog.solutious.com/blog/2009/04/10/wordpress-to-jekyll"/>
   <updated>2009-04-10T00:00:00-07:00</updated>
   <id>http://blog.solutious.com/blog/2009/04/10/wordpress-to-jekyll</id>
   <content type="html">&lt;p&gt;I started this blog in September 2008 with a post about &lt;a href="/2008/09/16/simple-ruby-encryption.html"&gt;encryption in Ruby&lt;/a&gt;. I used &lt;a href="http://tumblr.com/"&gt;Tumblr&lt;/a&gt; because I wanted something quick and simple. As it turned out, Tumblr is a great service for personal blogs but not for group and company blogs. Adding multiple users to a single blog with Tumblr is &lt;em&gt;strange&lt;/em&gt;. Every user must have their own personal blog before they can be added to the group blog. I also wanted more control over the layout and content.&lt;/p&gt;

&lt;p&gt;In December &lt;a href="/2008/12/12/tumblr-to-wordpress.html"&gt;I switched to WordPress&lt;/a&gt;. It was a surprisingly pleasant experience. I could do almost everything I wanted to do with the layout and I brought the content home to our own servers. But something still did not feel right. I don't particularly like databases at the best of times and using one for a blog is more than a bit excessive. There's a lot of overhead involved in running a &lt;a href="http://wordpress.org/"&gt;WordPress&lt;/a&gt; blog (the same thing can be said about any blog engine that combines an application with a database). There's the system administration to keep it up to date, secure, and performing well. There are more steps than necessary to write new posts. It's slow. That's a lot of cake!&lt;/p&gt;

&lt;p&gt;So what's the solution? &lt;a href="http://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt;, a blog-aware, static site generator. What's old is new again. I've been using Jekyll for &lt;a href="http://solutious.com"&gt;solutious.com&lt;/a&gt; for about a month and I'm loving it. Unlike databases, I love files regardless of the times so using a static site is right up my alley. And now I'm using it for the blog too. There's a lot &lt;a href="http://www.oiledmachine.com/posts/2008/12/27/overview-of-jekyll--a-static-site-generator-written-in-ruby.html"&gt;of positive&lt;/a&gt; &lt;a href="http://blog.favrik.com/2009/03/02/installing-jekyll-on-ubuntu-8-10/"&gt;and helpful&lt;/a&gt; &lt;a href="http://drnicwilliams.com/2008/12/21/migrating-project-websites-to-github-pages-with-sake-tasks-new-websites-with-jekyll_generator/"&gt;stuff written&lt;/a&gt; &lt;a href="http://metajack.im/2009/01/23/blogging-with-git-emacs-and-jekyll/"&gt;about it&lt;/a&gt; already so I won't re-iterate that here. But I will mention that Jekyll also &lt;a href="http://github.com/blog/402-github-pages-upgraded-to-jekyll-0-5-0"&gt;plays nice with GitHub&lt;/a&gt; (which is logical since it's written by &lt;a href="http://tom.preston-werner.com/"&gt;Tom Preston-Werner&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I'll also mention that I like the name. Thanks TPW!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing sys-cpu 0.6.0 on OS X 10.5 Leopard</title>
   <link href="http://blog.solutious.com/blog/2008/12/30/installing-sys-cpu-osx"/>
   <updated>2008-12-30T00:00:00-08:00</updated>
   <id>http://blog.solutious.com/blog/2008/12/30/installing-sys-cpu-osx</id>
   <content type="html">&lt;p&gt;I was trying to install the
&lt;a href="http://rubyforge.org/projects/sysutils" title="sysutils at Rubyforge"&gt;sys-utils&lt;/a&gt; Ruby libraries today and got an error while building sys-cpu on OX 10.5 Leopard. sys-cpu is a multi-platform Ruby library for accessing information about the CPUs and it contains a native extension which needs to be compiled during them installation. This is the error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo gem install sys-cpu
  Building native extensions.  This could take a while...
  ERROR:  Error installing sys-cpu:
  ERROR: Failed to build gem native extension.
  ...
  cpu.c:14:17: error: kvm.h: No such file or directory
  cpu.c:14:17: error: kvm.h: No such file or directory
  cpu.c: In function 'cpu_load_avg':
  ...
  make: *** [cpu.o] Error 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OS X 10.5 seems to be missing a C header file, kvm.h, that's required by sys-cpu. Here's how you can solve the problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download a &lt;a href="http://rubyforge.org/frs/download.php/20065/sys-cpu-0.6.0.tar.gz" title="sys-cpu tar.gz"&gt;non-gem version&lt;/a&gt; and unpack it.&lt;/li&gt;
&lt;li&gt;Get a copy of kvm.h. If you're running OS X 10.5 that was upgraded from 10.4, you can find it in &lt;code&gt;/Developer/SDKs/MacOSX10.4.sdk/usr/include&lt;/code&gt;. If not, you can download it from here: &lt;a href="http://solutious.com/r/kvm.h"&gt;http://solutious.com/r/kvm.h&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Copy kvm.h in to sys-cpu-0.6.0/ext&lt;/li&gt;
&lt;li&gt;Inside of sys-cpu-0.6.0, run: &lt;code&gt;rake test&lt;/code&gt; then &lt;code&gt;sudo rake install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The following command should now run without errors: &lt;code&gt;ruby -r'sys/cpu' -e 1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's it!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>From Tumblr to WordPress</title>
   <link href="http://blog.solutious.com/blog/2008/12/12/tumblr-to-wordpress"/>
   <updated>2008-12-12T00:00:00-08:00</updated>
   <id>http://blog.solutious.com/blog/2008/12/12/tumblr-to-wordpress</id>
   <content type="html">&lt;p&gt;We're currently converting our blog from Tumblr to WordPress. We're literally in the middle of it but I wanted to take a moment to explain why we're moving and why we chose WordPress.&lt;/p&gt;

&lt;h2&gt;Why we're moving from Tumblr&lt;/h2&gt;

&lt;p&gt;We accepted Tumblr's strange management for group blogs and the broken archive page for FireFox. But there is one issue that is not excusable: &lt;strong&gt;extremely poor search engine performance&lt;/strong&gt;. This issue was brought up a few months ago by &lt;a href="http://www.16thletter.com/2008/05/08/why-im-kissing-tumblr-a-sad-sad-good-bye/"&gt;Melissa Chang&lt;/a&gt;, a &lt;a href="http://friendfeed.com/e/bf7efe81-48eb-4bdc-629c-ee5c55a4a2f2/Why-I-m-kissing-Tumblr-a-sad-sad-good-bye-16th/"&gt;flurry of discussion&lt;/a&gt; ensued, and Tumblr &lt;a href="http://staff.tumblr.com/post/35727451/weve-just-made-a-few-changes-to-make-your"&gt;made some changes&lt;/a&gt; Erik Dafforn posted a &lt;a href="http://seoblog.intrapromote.com/2008/05/tumblr_and_seo.html"&gt;more complete chronology&lt;/a&gt;). Seven months have passed and Tumblr search engine performance still sucks.&lt;/p&gt;

&lt;h2&gt;Why WordPress&lt;/h2&gt;

&lt;p&gt;There's surprisingly few choices. We looked at some Ruby options Mephisto, enki, Feather, all have strange quirks. We tried them all (and others) because we thought, "Hey it's been a few years since we installed a blog there must be a new kid on the block". The shocking answer is, &lt;em&gt;no, there's not&lt;/em&gt; (if you're looking for something with a reasonable installation process). Mephisto wants Rails 2.2.2. Feather has some issues with Merb and won't install anyway because gems.datamapper.com seems to be down. Enki just wouldn't run on Dreamhost (Passenger returned a vague error message but the logs contained nothing helpful). We thought we were on crazy pills but it appears to be reality!&lt;/p&gt;

&lt;p&gt;Why WordPress? &lt;em&gt;Because it works.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update (2008-12-19): WordPress continues to treat us well. I can't say the same for &lt;a href="http://disqus.com"&gt;Disqus&lt;/a&gt; however. The wordpress plugin returns broken HTML for the comments_number function (which is why we don't display the comment count on the left)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update (2009-04-12): We &lt;a href="/blog/2009/04/10/wordpress-to-jekyll/"&gt;changed again&lt;/a&gt;. The blog is now powered by the static site generator &lt;a href="http://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt;. Our comments are now powered by &lt;a href="http://intensedebate.com/"&gt;Intense Debate&lt;/a&gt;. We finally made it home&lt;/em&gt;!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using Amazon EC2 In Europe</title>
   <link href="http://blog.solutious.com/blog/2008/12/10/using-amazon-ec2-in-europe"/>
   <updated>2008-12-10T00:00:00-08:00</updated>
   <id>http://blog.solutious.com/blog/2008/12/10/using-amazon-ec2-in-europe</id>
   <content type="html">&lt;p&gt;If you're worked with EC2 before, there are a couple things you need to know to get started with launching machine instances in Europe. SSH Keys and AMIs are not shared between regions. We're going to create both of these and then launch an instance in Europe. There's also a new parameter &lt;code&gt;--region&lt;/code&gt; which you need to use to interact with the new availability zones. Let's giver'.&lt;/p&gt;

&lt;h2&gt;Create an S3 bucket in Europe&lt;/h2&gt;

&lt;p&gt;AMIs are stored in S3 so you need a bucket in Europe if you don't have one already (you'll probably want a new one for your machine images anyway). There's a Firefox extension called &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/3247"&gt;S3Fox&lt;/a&gt; that can help you do this (check the box labeled, "Place this bucket in Europe"). Note that S3Fox is quirky and ugly almost to the point where it's offensive. But it works and it's easier than writing a script. The free version of &lt;a href="http://rightscale.com/"&gt;RightScale&lt;/a&gt; can do this too. You can also use &lt;a href="http://s3tools.logix.cz/s3tools"&gt;S3Tools&lt;/a&gt; to create buckets but I've never used them so I can't recommend them.&lt;br/&gt;
&lt;/p&gt;

&lt;h2&gt;Copy an AMI from the US to EU&lt;/h2&gt;

&lt;p&gt;You have two choices: re-bundle your running instance(s) or copy your existing images with the &lt;code&gt;ec2-migrate-bundle&lt;/code&gt; tool. If you choose to re-bundle, follow the steps you normally would (described in the &lt;a href="http://docs.amazonwebservices.com/AWSEC2/2008-12-01/DeveloperGuide/index.html?bundling-an-ami-linux.html"&gt;developer guide&lt;/a&gt;) and then upload the bundle to Europe (also in the &lt;a href="http://docs.amazonwebservices.com/AWSEC2/2008-12-01/DeveloperGuide/index.html?CLTRG-ami-upload-bundle.html"&gt;developer guide&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The easiest approach is to use the &lt;code&gt;ec2-migrate-bundle&lt;/code&gt; tool. You'll need to install the latest &lt;a href="http://developer.amazonwebservices.com/connect/entry.jspa?externalID=368"&gt;AMI tools&lt;/a&gt; to a Linux or Windows machine near you (these &lt;em&gt;&lt;a href="http://developer.amazonwebservices.com/connect/message.jspa?messageID=92712"&gt;will not work on OSX&lt;/a&gt;&lt;/em&gt;). As a side note, the AMI tools are written in Ruby which is interesting because the &lt;a href="http://developer.amazonwebservices.com/connect/entry.jspa?externalID=351"&gt;API tools&lt;/a&gt; are written in Java.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-migrate-bundle --location EU --cert /mnt/cert-*.pem --privatekey /mnt/pk-*.pem \
--access-key ORANGEJUICE --secret-key SUp0rS3kRu7 \
--bucket BUCKET-IN-US --destination-bucket BUCKET-IN-EU \ 
--manifest IMAGE.manifest.xml 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: If you're running this command on an EC2 instance, you'll need to upload your encryption keys first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ scp -i PATH/2/private-key PATH/2/cert-*.pem PATH/2/pk-*.pem root@YOURMACHINE:/mnt/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From your local machine, run the follow to tell EC2 that your new Europe image exists:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-register --region eu-west-1 BUCKET-IN-EU/IMAGE.manifest.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Update API Tools&lt;/h2&gt;

&lt;p&gt;You won't be able to see your image yet b/c you need to update your &lt;a href="http://developer.amazonwebservices.com/connect/entry.jspa?externalID=351"&gt;API tools&lt;/a&gt;. You should run these on a &lt;em&gt;real, physical machine&lt;/em&gt;. Why? Because it's a good rule of thumb for keeping your keys secure. If you copy them to a machine instance, you could forget them and they could end up being available on every instance you startup.&lt;/p&gt;

&lt;p&gt;Now you'll be able to see your machine images in Europe:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-describe-images --region eu-west-1 -o self
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You'll be able to see the regions and availability zones:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-describe-regions
REGION  eu-west-1   eu-west-1.ec2.amazonaws.com
REGION  us-east-1   us-east-1.ec2.amazonaws.com

$ ec2-describe-availability-zones --region eu-west-1
AVAILABILITYZONE    eu-west-1a   available  eu-west-1
AVAILABILITYZONE    eu-west-1b   available  eu-west-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can make Europe your default region by adding the &lt;code&gt;EC2_URL&lt;/code&gt; variable to your environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Unix and Unix-like:
export EC2_URL=https://eu-west-1.ec2.amazonaws.com

# Windows:
set EC2_URL=https://eu-west-1.ec2.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Create an SSH key in Europe&lt;/h2&gt;

&lt;p&gt;Before you can launch an instance in Europe, you need to create a new SSH key:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-add-keypair eu-west-1-key --region eu-west-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of this command is your private key. Save it in a secure location! You'll need to make sure it's only readable by you (&lt;code&gt;chmod 600 eu-west-1-key&lt;/code&gt;). SSH won't use it otherwise.&lt;/p&gt;

&lt;h2&gt;Create a security group in Europe&lt;/h2&gt;

&lt;p&gt;The default security group won't allow you to SSH in to your new instance. You can create a new group with these commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-add-group --region eu-west-1 -d "Potato Storage" potato
GROUP   potato  Potato Storage

$ ec2-authorize --region eu-west-1 -p 22 potato
GROUP       potato  
PERMISSION      potato  ALLOWS  tcp 22  22  FROM    CIDR    0.0.0.0/0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If security groups are new to you, be sure to check out the &lt;a href="http://docs.amazonwebservices.com/AWSEC2/2008-12-01/DeveloperGuide/index.html?CLTRG-ami-migrate-bundle.html"&gt;documentation&lt;/a&gt; and &lt;a href="http://docs.amazonwebservices.com/AmazonEC2/dg/2006-10-01/distributed-firewall-examples.html"&gt;firewall examples&lt;/a&gt;. &lt;a href="http://broadcast.oreilly.com/2008/11/20-rules-for-amazon-cloud-security.html"&gt;Twenty Rules for Amazon Cloud Security&lt;/a&gt; is a good read too.&lt;/p&gt;

&lt;h2&gt;Launch an instance in Europe (finally!)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-run-instances --region eu-west-1 --availability-zone eu-west-1b \
--key eu-west-1-key --group potato -t m1.small ami-XXXXXXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use the following command to see when it becomes available:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-describe-instances --region eu-west-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it does, log in and have some fun!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh -i PATH/2/eu-west-1-key root@ec2-XX-XXX-XX-XXX.eu-west-1.compute.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Don't forget to terminate the instance!&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-terminate-instances --region eu-west-1 i-XXXXXXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Extra Stuff&lt;/h2&gt;

&lt;p&gt;There's more information about regions in the &lt;a href="http://developer.amazonwebservices.com/connect/entry.jspa?externalID=1927&amp;amp;categoryID=174"&gt;Amazon EC2 Regions Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy running your apps in style!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Basic Voicemail System using Twilio</title>
   <link href="http://blog.solutious.com/blog/2008/12/04/voicemail-with-twilio"/>
   <updated>2008-12-04T00:00:00-08:00</updated>
   <id>http://blog.solutious.com/blog/2008/12/04/voicemail-with-twilio</id>
   <content type="html">&lt;p&gt;We setup a voicemail system this week using &lt;a href="http://twilio.com/"&gt;Twilio&lt;/a&gt;. There are &lt;a href="http://thethomashowecompany.com/449/twilio-comes-out"&gt;other similar services&lt;/a&gt; but Twilio was the first one we've found that's both available (&lt;a href="http://cloudvox.com/"&gt;CloudVox&lt;/a&gt; is in private beta) and &lt;em&gt;really&lt;/em&gt; simple to get started.&lt;/p&gt;

&lt;p&gt;If you aren't familiar with it, Twilio is a voice communication system with an &lt;a href="http://www.twilio.com/docs/api_reference/TwiML/"&gt;HTTP/XML API&lt;/a&gt;. You create an account with them and they give you a phone number and an API key. Then you write some code that outputs XML (they have &lt;a href="http://www.twilio.com/docs/libraries/"&gt;libraries for Ruby, Java, Python, and PHP&lt;/a&gt; and configure your account to point to an XML resource to handle the initial incoming call.  They charge $0.03 or $0.05 cents per minute depending on whether you're using a local or toll free number.&lt;/p&gt;

&lt;p&gt;We've posted &lt;a href="http://gist.github.com/31922"&gt;one of our test configurations&lt;/a&gt; to Gist (we blame the PHP on the intern :p sorry Dave). Here's our initial feedback:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The XML is based on simple verbs (&lt;a href="http://www.twilio.com/docs/api_reference/TwiML/play"&gt;Play&lt;/a&gt;, &lt;a href="http://www.twilio.com/docs/api_reference/TwiML/say"&gt;Say&lt;/a&gt;, &lt;a href="http://www.twilio.com/docs/api_reference/TwiML/record"&gt;Record&lt;/a&gt;...) so it's easy to get started. I've read complaints about using XML in this way, usually on the basis that it's over simplified and proprietary, but I disagree. If something can be simplified, simplify it. And if it's easy to work with, the fact that it's a proprietary language doesn't matter. (On a side note, is there a standard, open language for controlling voice communication systems?)&lt;/li&gt;
&lt;li&gt;The debugger is pretty cool. You can look at the recent requests and responses between their system and your web service. We solved two problems like this (XML encoding issues, &lt;em&gt;again&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;The mp3s don't play properly in Safari (we're running 3.2.1). It displays a &lt;a href="http://farm4.static.flickr.com/3234/3081614839_acdda24cac.jpg?v=0"&gt;black screen that says "No video"&lt;/a&gt;. Sometimes it will play after you hit the spacebar, sometimes not. Firefox is fine. &lt;em&gt;Update: this looks like it could be related to Flip4Mac, which I updated last week. The same thing is happening with other mp3s.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;I somewhat concerned about jerks calling in many times or for long durations to charge up our bill. This is an issue with all similar services but I didn't see anything in the docs or API that would prevent this in Twilio.&lt;/li&gt;
&lt;li&gt;The prices are reasonable for moderate use but I expect they should decrease as their customer base increases (they should be able to negotiate lower rates from their suppliers).&lt;/li&gt;
&lt;li&gt;Their customer service is excellent! We experienced it and so did our friends at &lt;a href="http://dealerdiagnostics.com/"&gt;Dealer Diagnostics&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We'll be looking at other options and we'll post our findings here.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sun's EC2 Support sucks</title>
   <link href="http://blog.solutious.com/blog/2008/10/17/sun-ec2-support-sucks"/>
   <updated>2008-10-17T00:00:00-07:00</updated>
   <id>http://blog.solutious.com/blog/2008/10/17/sun-ec2-support-sucks</id>
   <content type="html">&lt;p&gt;So I'm pretty disappointed in Sun. I've made good things happen with OpenSolaris and EC2 separately and I was pretty excited about using them together. But we've been waiting for three weeks for a reply to my inquiry regarding &lt;a href="http://blog.solutious.com/post/51633311/ec2-disk-performance-linux-vs-opensolaris"&gt;OpenSolaris I/O performance in Amazon EC2&lt;/a&gt;. I can only assume there's an issue that they're not ready to talk about because they were very responsive to other questions. This is an unwelcome contrast to the type of support we're enjoying from Amazon.&lt;/p&gt;

&lt;p&gt;My advice: Stick with Linux on EC2.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>EC2 Disk Performance, Linux vs OpenSolaris - Preliminary Results</title>
   <link href="http://blog.solutious.com/blog/2008/09/23/ec2-disk-performance-linux-solaris"/>
   <updated>2008-09-23T00:00:00-07:00</updated>
   <id>http://blog.solutious.com/blog/2008/09/23/ec2-disk-performance-linux-solaris</id>
   <content type="html">&lt;p&gt;I started playing with the Solaris images on EC2 last week. I'm crazy for disk performance so I got straight to the benchmarking. These are only preliminary results because I'm only testing reading and writing medium to large files and I'm still getting a feel for the performance. In these tests I'm using the dd utility to read and write files to several mounts (local, local swap, and EBS). The test and results are below and I follow up with what will be improved on for the next test. NOTE: I'm currently waiting for a response from Sun's EC2 support before continuing the tests.&lt;/p&gt;

&lt;p&gt;Summary: Reading and writing medium to large files in OpenSolaris in EC2 appears to be slower than Linux. More testing is required.&lt;/p&gt;

&lt;h2&gt;Tests&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Read/write 10MB, 100MB, 1000MB to /, /mnt/, /data, /tmp

&lt;ul&gt;
&lt;li&gt;/ and /mnt are the default "local" disks&lt;/li&gt;
&lt;li&gt;/tmp is the default "local" swap space&lt;/li&gt;
&lt;li&gt;/data is an EBS volume (ext3 for linux, zfs for solaris)&lt;/li&gt;
&lt;li&gt;See script &lt;a href="http://solutious.com/benchmarks/disktest1-sept.17.2008/disktest1.sh.txt"&gt;disktest1.sh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Machines&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;m1.small, Fedora 8 Linux 32-bit (&lt;a href="http://solutious.com/benchmarks/disktest1-sept.17.2008/disktest1-linux-small.log"&gt;test data&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;m1.small, OpenSolaris 2008.05 32-bit (no test data, killed after 20 minutes)&lt;/li&gt;
&lt;li&gt;m1.large, Fedora 8 Linux 64-bit (&lt;a href="http://solutious.com/benchmarks/disktest1-sept.17.2008/disktest1-linux-large.log"&gt;test data&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;m1.large, Solaris Express Community Edition build 79 64-bit (&lt;a href="http://solutious.com/benchmarks/disktest1-sept.17.2008/disktest1-solaris-large.log"&gt;test data&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Local Disk performance: Linux is much faster.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux vs OpenSolaris

&lt;ul&gt;
&lt;li&gt;OpenSolaris can be up to 30 times slower for 1GB+ files (2s vs 1m)&lt;/li&gt;
&lt;li&gt;About the same for 10MB and 100MB files (~0.02s)&lt;/li&gt;
&lt;li&gt;OpenSolaris swap (/tmp) performance is about 2x slower (2s vs 4s for 1GB)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Small Linux vs Large Linux

&lt;ul&gt;
&lt;li&gt;Comparable for 10MB files&lt;/li&gt;
&lt;li&gt;m1.small is amall is about 3x slower for 100MB files (0.6s vs 0.2s)&lt;/li&gt;
&lt;li&gt;m1.small is amall is about 5-8x slower for 1000MB files (12s vs 2s)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Small OpenSolaris vs Large OpenSolaris

&lt;ul&gt;
&lt;li&gt;The m1.small instance of OpenSolaris is really, really slow for all tests. I stopped the test after 20 minutes (note the m1.large OpenSolaris instance took 6.5 minutes)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EBS Performance: Linux is faster.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux vs OpenSolaris

&lt;ul&gt;
&lt;li&gt;Solaris performance is about 2.5x slower (2s vs 5s for 1GB)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Small Linux vs Large Linux

&lt;ul&gt;
&lt;li&gt;m1.small is about 2x slower for 10MB (0.05s vs 0.025s)&lt;/li&gt;
&lt;li&gt;m1.small is about 2-3x slower for 100MB (0.6s vs 0.2s)&lt;/li&gt;
&lt;li&gt;m1.small is about 7x slower for 1GB (14s vs 2s)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Small Solaris vs Large Solaris

&lt;ul&gt;
&lt;li&gt;m1.small is REALLY slow.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The times grew longer for each of the 3 runs (the first run was always the fastest). Try again with a delay in between to account for some kind of background EC2/EBS process to finish.&lt;/li&gt;
&lt;li&gt;There are occasional writes which are very slow for both platforms regardless of which test was being run.&lt;/li&gt;
&lt;li&gt;The Solaris Express Community Edition is not supported.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;What you can look forward to in the next test&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use standard public EC2 images. Include the ami ID and uname output for each test to be clear in the systems used.&lt;/li&gt;
&lt;li&gt;Track the total run time for all tests (note: above I only have times for the two large instances).&lt;/li&gt;
&lt;li&gt;Use bonnie-64 test to test caching / swapping performance.&lt;/li&gt;
&lt;li&gt;Use bonnie++ for testing small file performance.&lt;/li&gt;
&lt;li&gt;Restart instances between tests, define warm-up procedure.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Simple Encryption (in Ruby)</title>
   <link href="http://blog.solutious.com/blog/2008/09/16/simple-ruby-encryption"/>
   <updated>2008-09-16T00:00:00-07:00</updated>
   <id>http://blog.solutious.com/blog/2008/09/16/simple-ruby-encryption</id>
   <content type="html">&lt;p&gt;I occasionally get questions on how we do authentication in Ruby so I thought I'd write this post so I could direct people here. A lot of the authentication stuff we do is based on this simple implementation of &lt;a href="http://blog.leetsoft.com/2006/03/14/simple-encryption"&gt;RSA key support&lt;/a&gt;. There were a couple minor syntax errors in their &lt;a href="http://blog.leetsoft.com/files/crypto-key.rb.txt"&gt;crypto-key.rb&lt;/a&gt; though so here's a fixed version:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - pygmentize -f html -l ruby&lt;/p&gt;
</content>
 </entry>
 
 
</feed>