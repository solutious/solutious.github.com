<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The Solutious Blog</title>
 <link href="http://blog.solutious.com/atom.xml" rel="self"/>
 <link href="http://blog.solutious.com/"/>
 <updated>2009-05-03T11:27:46-04:00</updated>
 <id>http://blog.solutious.com/</id>
 <author>
   <name>Solutious Inc.</name>
   <email>info@solutious.com</email>
 </author>
 
 
 <entry>
   <title>Goodnight Sweet Prince (Dreamhost)</title>
   <link href="http://blog.solutious.com/blog/2009/05/03/goodnight-sweet-prince-dreamhost"/>
   <updated>2009-05-03T00:00:00-04:00</updated>
   <id>http://blog.solutious.com/blog/2009/05/03/goodnight-sweet-prince-dreamhost</id>
   <content type="html">&lt;p&gt;I have a difficult time putting to words the excitement I felt when GitHub announced &lt;a href='http://github.com/blog/315-cname-support-for-github-pages'&gt;CNAME support&lt;/a&gt;. And now, just a few short months later I&amp;#8217;ve finally freed myself from Dreamhost&amp;#8217;s shackles. I&amp;#8217;m now using GitHub for all my hosting needs (including solutious.com) and I must say, it feels pretty good.&lt;/p&gt;

&lt;p&gt;Shared hosting has served a useful purpose over the years, but it&amp;#8217;s days are numbered. &lt;a href='http://heroku.com/pricing'&gt;Heroku&lt;/a&gt;: free. &lt;a href='http://code.google.com/appengine/'&gt;Google App Engine&lt;/a&gt;: free. &lt;a href='http://appjet.com/'&gt;AppJet&lt;/a&gt;: free. You can&amp;#8217;t argue with that.&lt;/p&gt;

&lt;p&gt;GitHub is not free but CNAME support is included with all paid accounts which I already have.&lt;/p&gt;

&lt;h2 id='workflow_of_the_future'&gt;Workflow of the Future&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Me -&amp;gt; TextMate -&amp;gt; Markdown -&amp;gt; Terminal -&amp;gt; Jekyll -&amp;gt; Git -&amp;gt; You&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>It's an outrake!</title>
   <link href="http://blog.solutious.com/blog/2009/04/30/its-an-outrake"/>
   <updated>2009-04-30T00:00:00-04:00</updated>
   <id>http://blog.solutious.com/blog/2009/04/30/its-an-outrake</id>
   <content type="html">&lt;p&gt;This is a story about Ruby mixins, Rake, and hell. After releasing &lt;a href='http://github.com/solutious/rudy' title='Rudy: not your grandparents&amp;apos; deployment tool'&gt;Rudy&lt;/a&gt; 0.6 last week, I started immediately on 0.7. This next version has a rebuilt DSL for the routines configuration, including a new syntax for running shell commands. The new syntax makes it possible to specify shell commands like methods. You can probably see where this is heading. First, a comparison of the old and new syntax:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Old, 0.6 syntax&lt;/strong&gt; &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class='n'&gt;routines&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
  &lt;span class='n'&gt;startup&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
    &lt;span class='n'&gt;after&lt;/span&gt; &lt;span class='ss'&gt;:root&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;mkdir -p /path/2/create&amp;quot;&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New, 0.7 syntax&lt;/strong&gt; &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class='n'&gt;routines&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
  &lt;span class='n'&gt;startup&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
    &lt;span class='n'&gt;after&lt;/span&gt; &lt;span class='ss'&gt;:root&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
      &lt;span class='n'&gt;mkdir&lt;/span&gt; &lt;span class='ss'&gt;:p&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;/path/2/create&amp;quot;&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;There are several advantages to using the new syntax which I&amp;#8217;ll cover in a future post. Right now, I&amp;#8217;ll cut to the hellish chase.&lt;/p&gt;

&lt;p&gt;Both DSLs produce a configuration hash. Nothing else should happen when they&amp;#8217;re parsed. And nothing else did happen until I tried running the tests with rake. The old syntax was fine, but I was getting some strange errors with the new syntax. Stuff like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error in test/10_config/30_machines_test.rb: can&amp;#39;t convert Fixnum into String
/usr/local/lib/ruby/1.9.1/fileutils.rb:1386:in `path&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;FileUtils? That&amp;#8217;s weird, I don&amp;#8217;t use FileUtils. Or do I?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rake-0.8.4/lib/rake.rb&lt;/code&gt; includes &lt;a href='http://www.ruby-doc.org/core/classes/FileUtils.html'&gt;FileUtils&lt;/a&gt; into the RakeFileUtils module and later includes RakeFileUtils &lt;em&gt;into the global namespace&lt;/em&gt;. My criminy!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Offensive ruby code&lt;/strong&gt; &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class='k'&gt;module&lt;/span&gt; &lt;span class='nn'&gt;RakeFileUtils&lt;/span&gt;
  &lt;span class='kp'&gt;include&lt;/span&gt; &lt;span class='no'&gt;FileUtils&lt;/span&gt;       &lt;span class='c1'&gt;# Nothing wrong here&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='c1'&gt;# ... later on&lt;/span&gt;
&lt;span class='kp'&gt;include&lt;/span&gt; &lt;span class='no'&gt;RakeFileUtils&lt;/span&gt;     &lt;span class='c1'&gt;# Noooooooo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;That means when I&amp;#8217;m running rake the following methods are accessible from everywhere: &lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt;, &amp;#8230;! The &lt;code&gt;mkdir&lt;/code&gt; in the DSL was &lt;em&gt;being executed as it was parsed&lt;/em&gt;. That&amp;#8217;s insane. Thank the Great Scott I wasn&amp;#8217;t testing &lt;code&gt;rm&lt;/code&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Rudy, A Replacement for EC2 API Tools.</title>
   <link href="http://blog.solutious.com/blog/2009/04/22/rudy-ec2-api-tools-replacement"/>
   <updated>2009-04-22T00:00:00-04:00</updated>
   <id>http://blog.solutious.com/blog/2009/04/22/rudy-ec2-api-tools-replacement</id>
   <content type="html">&lt;p&gt;Rudy is a &lt;a href='/2009/04/21/rudy-deployment-introduction/'&gt;development and deployment tool&lt;/a&gt; for EC2. It comes with an executable called &lt;code&gt;rudy-ec2&lt;/code&gt; that can also be used as a replacement for Amazon&amp;#8217;s EC2 API tools. The EC2 API tools are a great reference implementation but they&amp;#8217;re unfriendly and become unwieldily when you have more than a few instances. &lt;code&gt;rudy-ec2&lt;/code&gt; is an alternative to these tools that can be used on it&amp;#8217;s own (you don&amp;#8217;t need to start using Rudy), allowing you to incorporate Rudy into your development process gradually.&lt;/p&gt;

&lt;h2 id='installation'&gt;Installation&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;rudy-ec2&lt;/code&gt; is included with Rudy so if you&amp;#8217;ve already installed Rudy, you can skip to the next section.&lt;/p&gt;

&lt;p&gt;Download Rudy from &lt;a href='http://github.com/solutious/rudy'&gt;github.com&lt;/a&gt; or install it via RubyGems:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo gem install rudy
$ sudo gem install solutious-rudy --source http://gems.github.com/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: If you are not installing via RubyGems and running Ruby 1.8.x, you need to make sure the Ruby dependencies (see the &lt;a href='http://github.com/solutious/rudy/blob/master/README.rdoc'&gt;README&lt;/a&gt;) are installed and in your LOAD&lt;em&gt;PATH. Ryan Tomayko wrote &lt;a href='http://gist.github.com/54177'&gt;a gist&lt;/a&gt; about it.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id='configuration_3_ways_to_do_it'&gt;Configuration, 3 ways to do it&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;rudy-ec2&lt;/code&gt; needs your Amazon Web Services credentials in order to execute commands on EC2. You can configure these in 3 ways: rudy configuration, environment variables or command-line options.&lt;/p&gt;

&lt;h3 id='rudy_configuration_method_1'&gt;Rudy Configuration (method 1)&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rudy-ec2&lt;/code&gt; can use the same configuration as &lt;code&gt;rudy&lt;/code&gt;. If you&amp;#8217;ve already created a Rudy configuration file, you don&amp;#8217;t need to do anything else. Otherwise, run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy generate-config
  [edit ~/.rudy/config with your Amazon Web Services credentials] 
$ rudy init&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: &lt;em&gt;The above command is&lt;/em&gt;&lt;em&gt;rudy&lt;/em&gt;* and not &lt;strong&gt;rudy-ec2&lt;/strong&gt;.*&lt;/p&gt;

&lt;h3 id='environment_variables_method_2'&gt;Environment Variables (method 2)&lt;/h3&gt;

&lt;h4 id='bash'&gt;Bash&lt;/h4&gt;

&lt;p&gt;Add the following to your &lt;code&gt;~/.bashrc&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AWS_ACCESS_KEY=&amp;#39;your_aws_key&amp;#39;
AWS_SECRET_KEY=&amp;#39;your_aws_secret&amp;#39;
AWS_ACCOUNT_NUMBER=123456789012
export AWS_ACCESS_KEY AWS_SECRET_KEY AWS_ACCOUNT_NUMBER

EC2_CERT=path/2/cert.pem
EC2_PRIVATE_KEY=path/2/pk.pem
export EC2_CERT EC2_PRIVATE_KEY&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then either start working in a new terminal window or run &lt;code&gt;source ~/.bashrc&lt;/code&gt; to refresh your current one.&lt;/p&gt;

&lt;h4 id='windowsdos'&gt;Windows/DOS&lt;/h4&gt;

&lt;p&gt;Set your environment variables from your System Properties menu.&lt;/p&gt;

&lt;h3 id='commandline_options_method_3'&gt;Command-line Options (method 3)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ rudy-ec2 -A your_aws_key -S your_aws_secret COMMAND&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: &lt;em&gt;If you use the command-line options, your credentials will appear in your shell history. You can run &lt;code&gt;history -c&lt;/code&gt; to clear it.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id='rudyec2_commands'&gt;rudy-ec2 Commands&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;rudy-ec2&lt;/code&gt; command follows the same convention as &lt;code&gt;rudy&lt;/code&gt; commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy-ec2 -h
USAGE: rudy-ec2 [global options] COMMAND [command options]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default command displays the current instances&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy-ec2
i-8794fcee  ec2-11-22-33-44.compute-1.amazonaws.com  (group-awesome)
i-9e94fcf7  ec2-55-66-77-88.compute-1.amazonaws.com  (group-awesome)
i-9394fcfa  terminated  (group-awesome)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When no arguments are given, all commands display information about the object you specify:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy-ec2 images
Images owned by amazon
aki-46e7002f i386   (aki-linux.2.6.21.7-2.fc8xen-xfs/vmlinuz.manifest.xml)
aki-9800e5f1 x86_64 (ec2-public-images/vmlinuz-2.6.18-xenU-ec2-v1.0.x86_64.aki.manifest.xml)
aki-9b00e5f2 i386   (ec2-public-images/vmlinuz-2.6.18-xenU-ec2-v1.0.i386.aki.manifest.xml)
...

$ rudy-ec2 groups
group-awesome (authorized accounts: 123456789012:default)
11.22.33.44/32 -&amp;gt; tcp(22), tcp(80), tcp(443)
55.66.77.88/32 -&amp;gt; tcp(22), tcp(80), tcp(443)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With arguments, you can create, modify or destroy all EC2 objects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy-ec2 instances -C -m ami-235fba4a -s m1.small -k keypair-name
i-9394fcfa  pending  (default)

$ rudy-ec2 groups -A -p 8080,8081 group-awesome
Authorize access to group-awesome from 11.22.33.44/32
on tcp ports: 8080, 8081
default (authorized accounts: 123456789012:default)
   11.22.33.44/32 -&amp;gt; tcp(22), tcp(80), tcp(443), tcp(88), tcp(99)
   11.22.33.44/32 -&amp;gt; tcp(8080), tcp(8081)&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='safety'&gt;Safety&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;m always a little nervous using the Amazon AMI tools because I feel like I&amp;#8217;m one command away from a nightmare. &lt;code&gt;rudy-ec2&lt;/code&gt; solves this by prompting for user input before executing any potentially destructive actions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy-ec2 groups -D group-awesome
Destroying group: group-awesome
Are you sure? To continue, resolve (7 * 5): &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can avoid the annoyance by providing the &lt;code&gt;-Y&lt;/code&gt; global&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy-ec2 -Y groups -D group-awesome    # Careful!&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That&amp;#8217;s &lt;code&gt;rudy-ec2&lt;/code&gt; in a nutshell. For more information, check out the &lt;a href='http://opensource.solutious.com/rudy'&gt;RDocs&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Rudy, not your grandparent's deployment tool</title>
   <link href="http://blog.solutious.com/blog/2009/04/21/rudy-not-your-grandparents-deployment-tool"/>
   <updated>2009-04-21T00:00:00-04:00</updated>
   <id>http://blog.solutious.com/blog/2009/04/21/rudy-not-your-grandparents-deployment-tool</id>
   <content type="html">&lt;p&gt;&lt;a href='http://github.com/solutious/rudy'&gt;Rudy&lt;/a&gt; is a command-line development and deployment tool. It&amp;#8217;s been in private beta for about two months and today marks the day of the &lt;a href='http://github.com/solutious/rudy/tree/0.6'&gt;first public release&lt;/a&gt; &lt;code&gt;[1]&lt;/code&gt;. The project is still in alpha status and many features have yet to be developed but it&amp;#8217;s already useful for exploring the features of Amazon EC2. In this post, I&amp;#8217;ll introduce Rudy&amp;#8217;s core features and demonstrate how these features can help build and manage environments in EC2.&lt;/p&gt;

&lt;h2 id='a_quick_look'&gt;A quick look&lt;/h2&gt;

&lt;p&gt;It&amp;#8217;s useful to know what working with Rudy looks like before getting into the details:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy startup            # Launch the default machine group, stage-app
$ rudy -e dev startup     # Launch the dev-app machine group
$ rudy machines           # List all instances running in stage-app
$ rudy -u root ssh        # SSH to root@m-us-east-1b-stage-app-01
$ rudy ssh uptime         # Execute the uptime command on app stage-app machines
$ rudy shutdown           # Terminate stage-app instances&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See also:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rudy -h 
$ rudy show-commands
$ rudy COMMAND -h&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='machine_groups'&gt;Machine Groups&lt;/h2&gt;

&lt;p&gt;Rudy helps you build and manage machines in EC2 by organizing them into groups of &lt;em&gt;environments&lt;/em&gt; and &lt;em&gt;roles&lt;/em&gt;. These are called &lt;em&gt;machine groups&lt;/em&gt;. You can run multiple machines with the same role. These are called &lt;em&gt;positions&lt;/em&gt;. Rudy also supports running machine groups across availability &lt;em&gt;zones&lt;/em&gt;. When you put all this together, you have a unique name for every machine. The default machine is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;         zone     env  role
          v        v    v   
    m-us-east-1b-stage-app-01
    ^                       ^
 &amp;quot;machine&amp;quot;                position&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;stage&lt;/code&gt; is the default environment and &lt;code&gt;app&lt;/code&gt; is the default role, but these can be changed too (see Defaults below). These machine groups are configured using a Ruby DSL (domain-specific language) that looks like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class='n'&gt;machines&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
  &lt;span class='c1'&gt;# Define two identical environments&lt;/span&gt;
  &lt;span class='n'&gt;environment&lt;/span&gt; &lt;span class='ss'&gt;:dev&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:stage&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
    &lt;span class='c1'&gt;# Default properties for all roles&lt;/span&gt;
    &lt;span class='n'&gt;ami&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;ami-235fba4a&amp;quot;&lt;/span&gt;
    &lt;span class='n'&gt;positions&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
    
    &lt;span class='n'&gt;role&lt;/span&gt; &lt;span class='ss'&gt;:app&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
      &lt;span class='c1'&gt;# Create two identical instances in the :app role. &lt;/span&gt;
      &lt;span class='n'&gt;positions&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;
      &lt;span class='c1'&gt;# Elastic IP addresses to be associated on startup&lt;/span&gt;
      &lt;span class='n'&gt;addresses&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;11.22.33.44&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;55.66.77.88&amp;quot;&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
    
    &lt;span class='n'&gt;role&lt;/span&gt; &lt;span class='ss'&gt;:analyzer&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
      &lt;span class='c1'&gt;# The :analyzer machines can have their own AMI&lt;/span&gt;
      &lt;span class='n'&gt;ami&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;ami-********&amp;quot;&lt;/span&gt;
      &lt;span class='c1'&gt;# Define EBS volumes for this machine&lt;/span&gt;
      &lt;span class='n'&gt;disks&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
        &lt;span class='n'&gt;path&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;/data/disk1&amp;quot;&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
          &lt;span class='n'&gt;size&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;
          &lt;span class='n'&gt;device&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;/dev/sdr&amp;quot;&lt;/span&gt;
        &lt;span class='k'&gt;end&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
    
  &lt;span class='k'&gt;end&lt;/span&gt;    
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The configuration above describes the properties for 4 machine groups: &lt;code&gt;dev-app&lt;/code&gt;, &lt;code&gt;dev-analyzer&lt;/code&gt;, &lt;code&gt;stage-app&lt;/code&gt;, and &lt;code&gt;stage-analyzer&lt;/code&gt;. Since we&amp;#8217;ve defined two &lt;code&gt;app&lt;/code&gt; machines per environment, that makes 6 machines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m-us-east-1b-dev-app-01&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;m-us-east-1b-dev-app-02&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;m-us-east-1b-dev-analyzer-01&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;m-us-east-1b-stage-app-01&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;m-us-east-1b-stage-app-02&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;m-us-east-1b-stage-analyzer-01&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='routines'&gt;Routines&lt;/h2&gt;

&lt;p&gt;The machines configuration describes the whats or the &amp;#8220;physical&amp;#8221; characteristics of the environments. The routines configuration describes the repeatable processes.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class='n'&gt;routines&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
  &lt;span class='c1'&gt;# Define routines for the stage environment&lt;/span&gt;
  &lt;span class='n'&gt;environment&lt;/span&gt; &lt;span class='ss'&gt;:stage&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;

    &lt;span class='n'&gt;role&lt;/span&gt; &lt;span class='ss'&gt;:analyzer&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
      &lt;span class='c1'&gt;# Tell Rudy what to do when you run &amp;quot;rudy startup&amp;quot;&lt;/span&gt;
      &lt;span class='n'&gt;startup&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
        &lt;span class='c1'&gt;# Execute &amp;quot;uname&amp;quot; on the local machine&lt;/span&gt;
        &lt;span class='n'&gt;before_local&lt;/span&gt; &lt;span class='no'&gt;Rudy&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;sysinfo&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;user&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='ss'&gt;:git&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:commit&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Rudy Startup&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
        &lt;span class='n'&gt;before_local&lt;/span&gt; &lt;span class='no'&gt;Rudy&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;sysinfo&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;user&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='ss'&gt;:git&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:push&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
        &lt;span class='n'&gt;disks&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
          &lt;span class='c1'&gt;# Create an EBS volume, attach it, format it, and mount it&lt;/span&gt;
          &lt;span class='n'&gt;create&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;/rudy/disk1&amp;quot;&lt;/span&gt;
        &lt;span class='k'&gt;end&lt;/span&gt;
        &lt;span class='n'&gt;after&lt;/span&gt; &lt;span class='ss'&gt;:username&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;/a/release/script&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
        &lt;span class='n'&gt;after&lt;/span&gt; &lt;span class='ss'&gt;:root&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;/etc/init.d/nginx&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;restart&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;
      &lt;span class='n'&gt;shutdown&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
        &lt;span class='n'&gt;before&lt;/span&gt; &lt;span class='ss'&gt;:root&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;/another/custom/script&amp;#39;&lt;/span&gt;
        &lt;span class='n'&gt;before&lt;/span&gt; &lt;span class='ss'&gt;:root&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='ss'&gt;:mysqladmin&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:u&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;shutdown&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
        &lt;span class='n'&gt;disks&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
          &lt;span class='c1'&gt;# Umount the volume, detach it, delete it&lt;/span&gt;
          &lt;span class='n'&gt;destroy&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;/rudy/disk1&amp;quot;&lt;/span&gt;
        &lt;span class='k'&gt;end&lt;/span&gt;
        &lt;span class='c1'&gt;# Rudy.sysinfo.user returns the process&amp;#39; current user (ENV[&amp;#39;user&amp;#39;])&lt;/span&gt;
        &lt;span class='n'&gt;after_local&lt;/span&gt; &lt;span class='no'&gt;Rudy&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;sysinfo&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;user&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;date&amp;quot;&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;    
    &lt;span class='k'&gt;end&lt;/span&gt;
    
  &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This routines configuration describes the processes for the &lt;code&gt;stage-analyzer&lt;/code&gt; group.&lt;/p&gt;

&lt;h2 id='running_a_routine'&gt;Running a Routine&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ rudy -r analyzer startup
Starting stage-app

---  BEFORE SCRIPTS (local)  ------------------------------
Connecting to localhost
...
Starting m-us-east-1b-stage-app-01
Associating 11.22.33.44 to i-11111111
Starting m-us-east-1b-stage-app-02
Associating 55.66.77.88 to i-22222222
....

---  DISK ROUTINES  ---------------------------------------
...

---  AFTER SCRIPTS  ---------------------------------------
...

The following machines are now available:
m-us-east-1b-stage-app-01  ec2-11-22-33-44.compute-1.amazonaws.com
m-us-east-1b-stage-app-02  ec2-55-66-77-88.compute-1.amazonaws.com&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='defaults'&gt;Defaults&lt;/h2&gt;

&lt;p&gt;You may be wondering where the &lt;code&gt;us-east-1b&lt;/code&gt; value comes from. This is an EC2 availability zone and it&amp;#8217;s one of several default values that Rudy assumes in order to function straight &amp;#8220;out of the box&amp;#8221;. The default values can be changed too:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class='n'&gt;defaults&lt;/span&gt; &lt;span class='k'&gt;do&lt;/span&gt;
  &lt;span class='n'&gt;region&lt;/span&gt; &lt;span class='ss'&gt;:&amp;quot;us-east-1&amp;quot;&lt;/span&gt; 
  &lt;span class='n'&gt;zone&lt;/span&gt; &lt;span class='ss'&gt;:&amp;quot;us-east-1b&amp;quot;&lt;/span&gt;
  &lt;span class='n'&gt;environment&lt;/span&gt; &lt;span class='ss'&gt;:stage&lt;/span&gt;
  &lt;span class='n'&gt;role&lt;/span&gt; &lt;span class='ss'&gt;:app&lt;/span&gt;
  &lt;span class='n'&gt;position&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;01&amp;quot;&lt;/span&gt;
  &lt;span class='n'&gt;user&lt;/span&gt; &lt;span class='no'&gt;ENV&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;].&lt;/span&gt;&lt;span class='n'&gt;to_sym&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='conclusion__more_to_come'&gt;Conclusion / More to come&lt;/h2&gt;

&lt;p&gt;As I mentioned, the current release of Rudy (0.6) is in alpha status so it&amp;#8217;s not ready for production. There&amp;#8217;s a lot of work to do, including a lot of documentation to write, but hopefully you can already see the value of incorporating Rudy into your development process. For now, the &lt;a href='http://github.com/solutious/rudy'&gt;README&lt;/a&gt; contains installation instructions and the &lt;a href='http://opensource.solutious.com/rudy'&gt;RDocs&lt;/a&gt; are somewhat helpful too!&lt;/p&gt;

&lt;h2 id='notes'&gt;Notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[1]&lt;/code&gt; Rudy has been available on GitHub since the project began, but this release is the first one with documentation.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>From WordPress to Jekyll</title>
   <link href="http://blog.solutious.com/blog/2009/04/10/wordpress-to-jekyll"/>
   <updated>2009-04-10T00:00:00-04:00</updated>
   <id>http://blog.solutious.com/blog/2009/04/10/wordpress-to-jekyll</id>
   <content type="html">&lt;p&gt;I started this blog in September 2008 with a post about &lt;a href='/2008/09/16/simple-ruby-encryption.html'&gt;encryption in Ruby&lt;/a&gt;. I used &lt;a href='http://tumblr.com/'&gt;Tumblr&lt;/a&gt; because I wanted something quick and simple. As it turned out, Tumblr is a great service for personal blogs but not for group and company blogs. Adding multiple users to a single blog with Tumblr is &lt;em&gt;strange&lt;/em&gt;. Every user must have their own personal blog before they can be added to the group blog. I also wanted more control over the layout and content.&lt;/p&gt;

&lt;p&gt;In December &lt;a href='/2008/12/12/tumblr-to-wordpress.html'&gt;I switched to WordPress&lt;/a&gt;. It was a surprisingly pleasant experience. I could do almost everything I wanted to do with the layout and I brought the content home to our own servers. But something still did not feel right. I don&amp;#8217;t particularly like databases at the best of times and using one for a blog is more than a bit excessive. There&amp;#8217;s a lot of overhead involved in running a &lt;a href='http://wordpress.org/'&gt;WordPress&lt;/a&gt; blog (the same thing can be said about any blog engine that combines an application with a database). There&amp;#8217;s the system administration to keep it up to date, secure, and performing well. There are more steps than necessary to write new posts. It&amp;#8217;s slow. That&amp;#8217;s a lot of cake!&lt;/p&gt;

&lt;p&gt;So what&amp;#8217;s the solution? &lt;a href='http://github.com/mojombo/jekyll'&gt;Jekyll&lt;/a&gt;, a blog-aware, static site generator. What&amp;#8217;s old is new again. I&amp;#8217;ve been using Jekyll for &lt;a href='http://solutious.com'&gt;solutious.com&lt;/a&gt; for about a month and I&amp;#8217;m loving it. Unlike databases, I love files regardless of the times so using a static site is right up my alley. And now I&amp;#8217;m using it for the blog too. There&amp;#8217;s a lot &lt;a href='http://www.oiledmachine.com/posts/2008/12/27/overview-of-jekyll--a-static-site-generator-written-in-ruby.html'&gt;of positive&lt;/a&gt; &lt;a href='http://blog.favrik.com/2009/03/02/installing-jekyll-on-ubuntu-8-10/'&gt;and helpful&lt;/a&gt; &lt;a href='http://drnicwilliams.com/2008/12/21/migrating-project-websites-to-github-pages-with-sake-tasks-new-websites-with-jekyll_generator/'&gt;stuff written&lt;/a&gt; &lt;a href='http://metajack.im/2009/01/23/blogging-with-git-emacs-and-jekyll/'&gt;about it&lt;/a&gt; already so I won&amp;#8217;t re-iterate that here. But I will mention that Jekyll also &lt;a href='http://github.com/blog/402-github-pages-upgraded-to-jekyll-0-5-0'&gt;plays nice with GitHub&lt;/a&gt; (which is logical since it&amp;#8217;s written by &lt;a href='http://tom.preston-werner.com/'&gt;Tom Preston-Werner&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll also mention that I like the name. Thanks TPW!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Installing sys-cpu 0.6.0 on OS X 10.5 Leopard</title>
   <link href="http://blog.solutious.com/blog/2008/12/30/installing-sys-cpu-osx"/>
   <updated>2008-12-30T00:00:00-05:00</updated>
   <id>http://blog.solutious.com/blog/2008/12/30/installing-sys-cpu-osx</id>
   <content type="html">&lt;p&gt;I was trying to install the &lt;a href='http://rubyforge.org/projects/sysutils' title='sysutils at Rubyforge'&gt;sys-utils&lt;/a&gt; Ruby libraries today and got an error while building sys-cpu on OX 10.5 Leopard. sys-cpu is a multi-platform Ruby library for accessing information about the CPUs and it contains a native extension which needs to be compiled during them installation. This is the error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo gem install sys-cpu
  Building native extensions.  This could take a while...
  ERROR:  Error installing sys-cpu:
  ERROR: Failed to build gem native extension.
  ...
  cpu.c:14:17: error: kvm.h: No such file or directory
  cpu.c:14:17: error: kvm.h: No such file or directory
  cpu.c: In function &amp;#39;cpu_load_avg&amp;#39;:
  ...
  make: *** [cpu.o] Error 1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OS X 10.5 seems to be missing a C header file, kvm.h, that&amp;#8217;s required by sys-cpu. Here&amp;#8217;s how you can solve the problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download a &lt;a href='http://rubyforge.org/frs/download.php/20065/sys-cpu-0.6.0.tar.gz' title='sys-cpu tar.gz'&gt;non-gem version&lt;/a&gt; and unpack it.&lt;/li&gt;

&lt;li&gt;Get a copy of kvm.h. If you&amp;#8217;re running OS X 10.5 that was upgraded from 10.4, you can find it in &lt;code&gt;/Developer/SDKs/MacOSX10.4.sdk/usr/include&lt;/code&gt;. If not, you can download it from here: &lt;a href='http://solutious.com/r/kvm.h'&gt;http://solutious.com/r/kvm.h&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;Copy kvm.h in to sys-cpu-0.6.0/ext&lt;/li&gt;

&lt;li&gt;Inside of sys-cpu-0.6.0, run: &lt;code&gt;rake test&lt;/code&gt; then &lt;code&gt;sudo rake install&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;The following command should now run without errors: &lt;code&gt;ruby -r&amp;#39;sys/cpu&amp;#39; -e 1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#8217;s it!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>From Tumblr to WordPress</title>
   <link href="http://blog.solutious.com/blog/2008/12/12/tumblr-to-wordpress"/>
   <updated>2008-12-12T00:00:00-05:00</updated>
   <id>http://blog.solutious.com/blog/2008/12/12/tumblr-to-wordpress</id>
   <content type="html">&lt;p&gt;We&amp;#8217;re currently converting our blog from Tumblr to WordPress. We&amp;#8217;re literally in the middle of it but I wanted to take a moment to explain why we&amp;#8217;re moving and why we chose WordPress.&lt;/p&gt;

&lt;h2 id='why_were_moving_from_tumblr'&gt;Why we&amp;#8217;re moving from Tumblr&lt;/h2&gt;

&lt;p&gt;We accepted Tumblr&amp;#8217;s strange management for group blogs and the broken archive page for FireFox. But there is one issue that is not excusable: &lt;strong&gt;extremely poor search engine performance&lt;/strong&gt;. This issue was brought up a few months ago by &lt;a href='http://www.16thletter.com/2008/05/08/why-im-kissing-tumblr-a-sad-sad-good-bye/'&gt;Melissa Chang&lt;/a&gt;, a &lt;a href='http://friendfeed.com/e/bf7efe81-48eb-4bdc-629c-ee5c55a4a2f2/Why-I-m-kissing-Tumblr-a-sad-sad-good-bye-16th/'&gt;flurry of discussion&lt;/a&gt; ensued, and Tumblr &lt;a href='http://staff.tumblr.com/post/35727451/weve-just-made-a-few-changes-to-make-your'&gt;made some changes&lt;/a&gt; Erik Dafforn posted a &lt;a href='http://seoblog.intrapromote.com/2008/05/tumblr_and_seo.html'&gt;more complete chronology&lt;/a&gt;). Seven months have passed and Tumblr search engine performance still sucks.&lt;/p&gt;

&lt;h2 id='why_wordpress'&gt;Why WordPress&lt;/h2&gt;

&lt;p&gt;There&amp;#8217;s surprisingly few choices. We looked at some Ruby options Mephisto, enki, Feather, all have strange quirks. We tried them all (and others) because we thought, &amp;#8220;Hey it&amp;#8217;s been a few years since we installed a blog there must be a new kid on the block&amp;#8221;. The shocking answer is, &lt;em&gt;no, there&amp;#8217;s not&lt;/em&gt; (if you&amp;#8217;re looking for something with a reasonable installation process). Mephisto wants Rails 2.2.2. Feather has some issues with Merb and won&amp;#8217;t install anyway because gems.datamapper.com seems to be down. Enki just wouldn&amp;#8217;t run on Dreamhost (Passenger returned a vague error message but the logs contained nothing helpful). We thought we were on crazy pills but it appears to be reality!&lt;/p&gt;

&lt;p&gt;Why WordPress? &lt;em&gt;Because it works.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update (2008-12-19): WordPress continues to treat us well. I can&amp;#8217;t say the same for &lt;a href='http://disqus.com'&gt;Disqus&lt;/a&gt; however. The wordpress plugin returns broken HTML for the comments&lt;em&gt;number function (which is why we don&amp;#8217;t display the comment count on the left)&lt;em&gt;.&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update (2009-04-12): We &lt;a href='/blog/2009/04/10/wordpress-to-jekyll/'&gt;changed again&lt;/a&gt;. The blog is now powered by the static site generator &lt;a href='http://github.com/mojombo/jekyll'&gt;Jekyll&lt;/a&gt;. Our comments are now powered by &lt;a href='http://intensedebate.com/'&gt;Intense Debate&lt;/a&gt;. We finally made it home&lt;/em&gt;!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Using Amazon EC2 In Europe</title>
   <link href="http://blog.solutious.com/blog/2008/12/10/using-amazon-ec2-in-europe"/>
   <updated>2008-12-10T00:00:00-05:00</updated>
   <id>http://blog.solutious.com/blog/2008/12/10/using-amazon-ec2-in-europe</id>
   <content type="html">&lt;p&gt;If you&amp;#8217;re worked with EC2 before, there are a couple things you need to know to get started with launching machine instances in Europe. SSH Keys and AMIs are not shared between regions. We&amp;#8217;re going to create both of these and then launch an instance in Europe. There&amp;#8217;s also a new parameter &lt;code&gt;--region&lt;/code&gt; which you need to use to interact with the new availability zones. Let&amp;#8217;s giver&amp;#8217;.&lt;/p&gt;

&lt;h2 id='create_an_s3_bucket_in_europe'&gt;Create an S3 bucket in Europe&lt;/h2&gt;

&lt;p&gt;AMIs are stored in S3 so you need a bucket in Europe if you don&amp;#8217;t have one already (you&amp;#8217;ll probably want a new one for your machine images anyway). There&amp;#8217;s a Firefox extension called &lt;a href='https://addons.mozilla.org/en-US/firefox/addon/3247'&gt;S3Fox&lt;/a&gt; that can help you do this (check the box labeled, &amp;#8220;Place this bucket in Europe&amp;#8221;). Note that S3Fox is quirky and ugly almost to the point where it&amp;#8217;s offensive. But it works and it&amp;#8217;s easier than writing a script. The free version of &lt;a href='http://rightscale.com/'&gt;RightScale&lt;/a&gt; can do this too. You can also use &lt;a href='http://s3tools.logix.cz/s3tools'&gt;S3Tools&lt;/a&gt; to create buckets but I&amp;#8217;ve never used them so I can&amp;#8217;t recommend them.&lt;/p&gt;

&lt;h2 id='copy_an_ami_from_the_us_to_eu'&gt;Copy an AMI from the US to EU&lt;/h2&gt;

&lt;p&gt;You have two choices: re-bundle your running instance(s) or copy your existing images with the &lt;code&gt;ec2-migrate-bundle&lt;/code&gt; tool. If you choose to re-bundle, follow the steps you normally would (described in the &lt;a href='http://docs.amazonwebservices.com/AWSEC2/2008-12-01/DeveloperGuide/index.html?bundling-an-ami-linux.html'&gt;developer guide&lt;/a&gt;) and then upload the bundle to Europe (also in the &lt;a href='http://docs.amazonwebservices.com/AWSEC2/2008-12-01/DeveloperGuide/index.html?CLTRG-ami-upload-bundle.html'&gt;developer guide&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The easiest approach is to use the &lt;code&gt;ec2-migrate-bundle&lt;/code&gt; tool. You&amp;#8217;ll need to install the latest &lt;a href='http://developer.amazonwebservices.com/connect/entry.jspa?externalID=368'&gt;AMI tools&lt;/a&gt; to a Linux or Windows machine near you (these &lt;em&gt;&lt;a href='http://developer.amazonwebservices.com/connect/message.jspa?messageID=92712'&gt;will not work on OSX&lt;/a&gt;&lt;/em&gt;). As a side note, the AMI tools are written in Ruby which is interesting because the &lt;a href='http://developer.amazonwebservices.com/connect/entry.jspa?externalID=351'&gt;API tools&lt;/a&gt; are written in Java.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-migrate-bundle --location EU --cert /mnt/cert-*.pem --privatekey /mnt/pk-*.pem \
--access-key ORANGEJUICE --secret-key SUp0rS3kRu7 \
--bucket BUCKET-IN-US --destination-bucket BUCKET-IN-EU \ 
--manifest IMAGE.manifest.xml &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: If you&amp;#8217;re running this command on an EC2 instance, you&amp;#8217;ll need to upload your encryption keys first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ scp -i PATH/2/private-key PATH/2/cert-*.pem PATH/2/pk-*.pem root@YOURMACHINE:/mnt/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From your local machine, run the follow to tell EC2 that your new Europe image exists:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-register --region eu-west-1 BUCKET-IN-EU/IMAGE.manifest.xml&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='update_api_tools'&gt;Update API Tools&lt;/h2&gt;

&lt;p&gt;You won&amp;#8217;t be able to see your image yet b/c you need to update your &lt;a href='http://developer.amazonwebservices.com/connect/entry.jspa?externalID=351'&gt;API tools&lt;/a&gt;. You should run these on a &lt;em&gt;real, physical machine&lt;/em&gt;. Why? Because it&amp;#8217;s a good rule of thumb for keeping your keys secure. If you copy them to a machine instance, you could forget them and they could end up being available on every instance you startup.&lt;/p&gt;

&lt;p&gt;Now you&amp;#8217;ll be able to see your machine images in Europe:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-describe-images --region eu-west-1 -o self&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;#8217;ll be able to see the regions and availability zones:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-describe-regions
REGION	eu-west-1	eu-west-1.ec2.amazonaws.com
REGION	us-east-1	us-east-1.ec2.amazonaws.com

$ ec2-describe-availability-zones --region eu-west-1
AVAILABILITYZONE	eu-west-1a	 available	eu-west-1
AVAILABILITYZONE	eu-west-1b	 available	eu-west-1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can make Europe your default region by adding the &lt;code&gt;EC2_URL&lt;/code&gt; variable to your environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Unix and Unix-like:
export EC2_URL=https://eu-west-1.ec2.amazonaws.com

# Windows:
set EC2_URL=https://eu-west-1.ec2.amazonaws.com&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='create_an_ssh_key_in_europe'&gt;Create an SSH key in Europe&lt;/h2&gt;

&lt;p&gt;Before you can launch an instance in Europe, you need to create a new SSH key:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-add-keypair eu-west-1-key --region eu-west-1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of this command is your private key. Save it in a secure location! You&amp;#8217;ll need to make sure it&amp;#8217;s only readable by you (&lt;code&gt;chmod 600 eu-west-1-key&lt;/code&gt;). SSH won&amp;#8217;t use it otherwise.&lt;/p&gt;

&lt;h2 id='create_a_security_group_in_europe'&gt;Create a security group in Europe&lt;/h2&gt;

&lt;p&gt;The default security group won&amp;#8217;t allow you to SSH in to your new instance. You can create a new group with these commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-add-group --region eu-west-1 -d &amp;quot;Potato Storage&amp;quot; potato
GROUP	potato	Potato Storage

$ ec2-authorize --region eu-west-1 -p 22 potato
GROUP		potato	
PERMISSION		potato	ALLOWS	tcp	22	22	FROM	CIDR	0.0.0.0/0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If security groups are new to you, be sure to check out the &lt;a href='http://docs.amazonwebservices.com/AWSEC2/2008-12-01/DeveloperGuide/index.html?CLTRG-ami-migrate-bundle.html'&gt;documentation&lt;/a&gt; and &lt;a href='http://docs.amazonwebservices.com/AmazonEC2/dg/2006-10-01/distributed-firewall-examples.html'&gt;firewall examples&lt;/a&gt;. &lt;a href='http://broadcast.oreilly.com/2008/11/20-rules-for-amazon-cloud-security.html'&gt;Twenty Rules for Amazon Cloud Security&lt;/a&gt; is a good read too.&lt;/p&gt;

&lt;h2 id='launch_an_instance_in_europe_finally'&gt;Launch an instance in Europe (finally!)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-run-instances --region eu-west-1 --availability-zone eu-west-1b \
--key eu-west-1-key --group potato -t m1.small ami-XXXXXXXX&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use the following command to see when it becomes available:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-describe-instances --region eu-west-1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it does, log in and have some fun!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh -i PATH/2/eu-west-1-key root@ec2-XX-XXX-XX-XXX.eu-west-1.compute.amazonaws.com&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='dont_forget_to_terminate_the_instance'&gt;Don&amp;#8217;t forget to terminate the instance!&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ ec2-terminate-instances --region eu-west-1 i-XXXXXXXX&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='extra_stuff'&gt;Extra Stuff&lt;/h2&gt;

&lt;p&gt;There&amp;#8217;s more information about regions in the &lt;a href='http://developer.amazonwebservices.com/connect/entry.jspa?externalID=1927&amp;amp;categoryID=174'&gt;Amazon EC2 Regions Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy running your apps in style!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>A Basic Voicemail System using Twilio</title>
   <link href="http://blog.solutious.com/blog/2008/12/04/voicemail-with-twilio"/>
   <updated>2008-12-04T00:00:00-05:00</updated>
   <id>http://blog.solutious.com/blog/2008/12/04/voicemail-with-twilio</id>
   <content type="html">&lt;p&gt;We setup a voicemail system this week using &lt;a href='http://twilio.com/'&gt;Twilio&lt;/a&gt;. There are &lt;a href='http://thethomashowecompany.com/449/twilio-comes-out'&gt;other similar services&lt;/a&gt; but Twilio was the first one we&amp;#8217;ve found that&amp;#8217;s both available (&lt;a href='http://cloudvox.com/'&gt;CloudVox&lt;/a&gt; is in private beta) and &lt;em&gt;really&lt;/em&gt; simple to get started.&lt;/p&gt;

&lt;p&gt;If you aren&amp;#8217;t familiar with it, Twilio is a voice communication system with an &lt;a href='http://www.twilio.com/docs/api_reference/TwiML/'&gt;HTTP/XML API&lt;/a&gt;. You create an account with them and they give you a phone number and an API key. Then you write some code that outputs XML (they have &lt;a href='http://www.twilio.com/docs/libraries/'&gt;libraries for Ruby, Java, Python, and PHP&lt;/a&gt; and configure your account to point to an XML resource to handle the initial incoming call. They charge $0.03 or $0.05 cents per minute depending on whether you&amp;#8217;re using a local or toll free number.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ve posted &lt;a href='http://gist.github.com/31922'&gt;one of our test configurations&lt;/a&gt; to Gist (we blame the PHP on the intern :p sorry Dave). Here&amp;#8217;s our initial feedback:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The XML is based on simple verbs (&lt;a href='http://www.twilio.com/docs/api_reference/TwiML/play'&gt;Play&lt;/a&gt;, &lt;a href='http://www.twilio.com/docs/api_reference/TwiML/say'&gt;Say&lt;/a&gt;, &lt;a href='http://www.twilio.com/docs/api_reference/TwiML/record'&gt;Record&lt;/a&gt;&amp;#8230;) so it&amp;#8217;s easy to get started. I&amp;#8217;ve read complaints about using XML in this way, usually on the basis that it&amp;#8217;s over simplified and proprietary, but I disagree. If something can be simplified, simplify it. And if it&amp;#8217;s easy to work with, the fact that it&amp;#8217;s a proprietary language doesn&amp;#8217;t matter. (On a side note, is there a standard, open language for controlling voice communication systems?)&lt;/li&gt;

&lt;li&gt;The debugger is pretty cool. You can look at the recent requests and responses between their system and your web service. We solved two problems like this (XML encoding issues, &lt;em&gt;again&lt;/em&gt;).&lt;/li&gt;

&lt;li&gt;The mp3s don&amp;#8217;t play properly in Safari (we&amp;#8217;re running 3.2.1). It displays a &lt;a href='http://farm4.static.flickr.com/3234/3081614839_acdda24cac.jpg?v=0'&gt;black screen that says &amp;#8220;No video&amp;#8221;&lt;/a&gt;. Sometimes it will play after you hit the spacebar, sometimes not. Firefox is fine. &lt;em&gt;Update: this looks like it could be related to Flip4Mac, which I updated last week. The same thing is happening with other mp3s.&lt;/em&gt;&lt;/li&gt;

&lt;li&gt;I somewhat concerned about jerks calling in many times or for long durations to charge up our bill. This is an issue with all similar services but I didn&amp;#8217;t see anything in the docs or API that would prevent this in Twilio.&lt;/li&gt;

&lt;li&gt;The prices are reasonable for moderate use but I expect they should decrease as their customer base increases (they should be able to negotiate lower rates from their suppliers).&lt;/li&gt;

&lt;li&gt;Their customer service is excellent! We experienced it and so did our friends at &lt;a href='http://dealerdiagnostics.com/'&gt;Dealer Diagnostics&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;#8217;ll be looking at other options and we&amp;#8217;ll post our findings here.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Sun's EC2 Support sucks</title>
   <link href="http://blog.solutious.com/blog/2008/10/17/sun-ec2-support-sucks"/>
   <updated>2008-10-17T00:00:00-04:00</updated>
   <id>http://blog.solutious.com/blog/2008/10/17/sun-ec2-support-sucks</id>
   <content type="html">&lt;p&gt;So I&amp;#8217;m pretty disappointed in Sun. I&amp;#8217;ve made good things happen with OpenSolaris and EC2 separately and I was pretty excited about using them together. But we&amp;#8217;ve been waiting for three weeks for a reply to my inquiry regarding &lt;a href='http://blog.solutious.com/post/51633311/ec2-disk-performance-linux-vs-opensolaris'&gt;OpenSolaris I/O performance in Amazon EC2&lt;/a&gt;. I can only assume there&amp;#8217;s an issue that they&amp;#8217;re not ready to talk about because they were very responsive to other questions. This is an unwelcome contrast to the type of support we&amp;#8217;re enjoying from Amazon.&lt;/p&gt;

&lt;p&gt;My advice: Stick with Linux on EC2.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>EC2 Disk Performance, Linux vs OpenSolaris - Preliminary Results</title>
   <link href="http://blog.solutious.com/blog/2008/09/23/ec2-disk-performance-linux-solaris"/>
   <updated>2008-09-23T00:00:00-04:00</updated>
   <id>http://blog.solutious.com/blog/2008/09/23/ec2-disk-performance-linux-solaris</id>
   <content type="html">&lt;p&gt;I started playing with the Solaris images on EC2 last week. I&amp;#8217;m crazy for disk performance so I got straight to the benchmarking. These are only preliminary results because I&amp;#8217;m only testing reading and writing medium to large files and I&amp;#8217;m still getting a feel for the performance. In these tests I&amp;#8217;m using the dd utility to read and write files to several mounts (local, local swap, and EBS). The test and results are below and I follow up with what will be improved on for the next test. NOTE: I&amp;#8217;m currently waiting for a response from Sun&amp;#8217;s EC2 support before continuing the tests.&lt;/p&gt;

&lt;p&gt;Summary: Reading and writing medium to large files in OpenSolaris in EC2 appears to be slower than Linux. More testing is required.&lt;/p&gt;

&lt;h2 id='tests'&gt;Tests&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Read/write 10MB, 100MB, 1000MB to /, /mnt/, /data, /tmp&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/ and /mnt are the default &amp;#8220;local&amp;#8221; disks&lt;/li&gt;

&lt;li&gt;/tmp is the default &amp;#8220;local&amp;#8221; swap space - /data is an EBS volume (ext3 for linux, zfs for solaris)&lt;/li&gt;

&lt;li&gt;See script &lt;a href='http://solutious.com/benchmarks/disktest1-sept.17.2008/disktest1.sh.txt'&gt;disktest1.sh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='machines'&gt;Machines&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;m1.small, Fedora 8 Linux 32-bit (&lt;a href='http://solutious.com/benchmarks/disktest1-sept.17.2008/disktest1-linux-small.log'&gt;test data&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;m1.small, OpenSolaris 2008.05 32-bit (no test data, killed after 20 minutes)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;m1.large, Fedora 8 Linux 64-bit (&lt;a href='http://solutious.com/benchmarks/disktest1-sept.17.2008/disktest1-linux-large.log'&gt;test data&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;m1.large, Solaris Express Community Edition build 79 64-bit (&lt;a href='http://solutious.com/benchmarks/disktest1-sept.17.2008/disktest1-solaris-large.log'&gt;test data&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id='conclusions'&gt;Conclusions&lt;/h2&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Local Disk performance: Linux is much faster. - Linux vs OpenSolaris - OpenSolaris can be up to 30 times slower for 1GB+ files (2s vs 1m) - About the same for 10MB and 100MB files (~0.02s) - OpenSolaris swap (/tmp) performance is about 2x slower (2s vs 4s for 1GB) - Small Linux vs Large Linux - Comparable for 10MB files - m1.small is amall is about 3x slower for 100MB files (0.6s vs 0.2s) - m1.small is amall is about 5-8x slower for 1000MB files (12s vs 2s) - Small OpenSolaris vs Large OpenSolaris - The m1.small instance of OpenSolaris is really, really slow for all tests. I stopped the test after 20 minutes (note the m1.large OpenSolaris instance took 6.5 minutes)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;EBS Performance: Linux is faster. - Linux vs OpenSolaris - Solaris performance is about 2.5x slower (2s vs 5s for 1GB) - Small Linux vs Large Linux - m1.small is about 2x slower for 10MB (0.05s vs 0.025s) - m1.small is about 2-3x slower for 100MB (0.6s vs 0.2s) - m1.small is about 7x slower for 1GB (14s vs 2s) - Small Solaris vs Large Solaris - m1.small is REALLY slow.&lt;/p&gt;

&lt;h2 id='notes'&gt;Notes&lt;/h2&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The times grew longer for each of the 3 runs (the first run was always the fastest). Try again with a delay in between to account for some kind of background EC2/EBS process to finish.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;There are occasional writes which are very slow for both platforms regardless of which test was being run.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The Solaris Express Community Edition is not supported.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='what_you_can_look_forward_to_in_the_next_test'&gt;What you can look forward to in the next test&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use standard public EC2 images. Include the ami ID and uname output for each test to be clear in the systems used.&lt;/li&gt;

&lt;li&gt;Track the total run time for all tests (note: above I only have times for the two large instances).&lt;/li&gt;

&lt;li&gt;Use bonnie-64 test to test caching / swapping performance.&lt;/li&gt;

&lt;li&gt;Use bonnie++ for testing small file performance.&lt;/li&gt;

&lt;li&gt;Restart instances between tests, define warm-up procedure.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Simple Encryption (in Ruby)</title>
   <link href="http://blog.solutious.com/blog/2008/09/16/simple-ruby-encryption"/>
   <updated>2008-09-16T00:00:00-04:00</updated>
   <id>http://blog.solutious.com/blog/2008/09/16/simple-ruby-encryption</id>
   <content type="html">&lt;p&gt;I occasionally get questions on how we do authentication in Ruby so I thought I&amp;#8217;d write this post so I could direct people here. A lot of the authentication stuff we do is based on this simple implementation of &lt;a href='http://blog.leetsoft.com/2006/03/14/simple-encryption'&gt;RSA key support&lt;/a&gt;. There were a couple minor syntax errors in their &lt;a href='http://blog.leetsoft.com/files/crypto-key.rb.txt'&gt;crypto-key.rb&lt;/a&gt; though so here&amp;#8217;s a fixed version:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;openssl&amp;#39;&lt;/span&gt; 
&lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;	&lt;span class='c1'&gt;# Added &lt;/span&gt;

&lt;span class='k'&gt;module&lt;/span&gt; &lt;span class='nn'&gt;Crypto&lt;/span&gt;
  
  &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nc'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nf'&gt;create_keys&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;priv&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;rsa_key&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;pub&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;priv&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;.pub&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;bits&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1024&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='n'&gt;private_key&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;OpenSSL&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='no'&gt;PKey&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='no'&gt;RSA&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;bits&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='no'&gt;File&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;priv&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;w+&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;fp&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;fp&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;private_key&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_s&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='no'&gt;File&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;pub&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;  &lt;span class='s2'&gt;&amp;quot;w+&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;fp&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;fp&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;private_key&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;public_key&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;to_s&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;    
    &lt;span class='n'&gt;private_key&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;
  
  &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Key&lt;/span&gt;
    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;initialize&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='vi'&gt;@public&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;data&lt;/span&gt; &lt;span class='o'&gt;=~&lt;/span&gt; &lt;span class='sr'&gt;/^-----BEGIN (RSA|DSA) PRIVATE KEY-----$/&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;nil?&lt;/span&gt;
      &lt;span class='vi'&gt;@key&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;OpenSSL&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='no'&gt;PKey&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='no'&gt;RSA&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
  
    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nc'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nf'&gt;from_file&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;filename&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;    
      &lt;span class='nb'&gt;self&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='no'&gt;File&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;read&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;filename&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
  
    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;encrypt&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;text&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='no'&gt;Base64&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;encode64&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='vi'&gt;@key&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;send&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;key_type&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;_encrypt&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;text&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
    
    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;decrypt&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;text&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='vi'&gt;@key&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;send&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;key_type&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;_decrypt&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='no'&gt;Base64&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;decode64&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;text&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
  
 &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;private?&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;  &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='vi'&gt;@public&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='k'&gt;end&lt;/span&gt; &lt;span class='c1'&gt;# Added () and ;&lt;/span&gt;

 &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;public?&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;   &lt;span class='vi'&gt;@public&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='k'&gt;end&lt;/span&gt; &lt;span class='c1'&gt;# Added () and ;&lt;/span&gt;
    
    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;key_type&lt;/span&gt;
      &lt;span class='vi'&gt;@public&lt;/span&gt; &lt;span class='p'&gt;?&lt;/span&gt; &lt;span class='ss'&gt;:public&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='ss'&gt;:private&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
  &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 
</feed>